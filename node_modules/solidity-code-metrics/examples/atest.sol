pragma solidity ^0.8.4;

import '@openzeppelin/contracts/token/ERC721/ERC721.sol';
import '@openzeppelin/contracts/access/Ownable.sol';

contract ValuartNFT is ERC721, Ownable {
    string private _baseURIextended;
    uint256 private _nextTokenId;
    address private _marketplace;
    mapping (uint => string) private _tokenURIs;

    constructor(string memory _name, string memory _symbol, address marketplace_) ERC721(_name, _symbol) {
        setMarketplace(marketplace_);
    }

    function setBaseURI(string memory baseURI_) external onlyOwner() {
        _baseURIextended = baseURI_;
    }

    function setMarketplace(address marketplace_) public onlyOwner() {
        _marketplace = marketplace_;
        setApprovalForAll(_marketplace, true);
    }

    function getMarketplace() public view returns (address) {
        return _marketplace;
    }

    function _setTokenURI(uint tokenId, string memory _tokenURI) internal virtual {
        require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
        _tokenURIs[tokenId] = _tokenURI;
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _baseURIextended;
    }

    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        string memory _tokenURI = _tokenURIs[tokenId];

        if (bytes(_baseURIextended).length == 0) {
            return _tokenURI;
        }

        return string(abi.encodePacked(_baseURIextended, _tokenURI));

    }

    function mint(string memory tokenURI_) external onlyOwner() returns (uint)  {
        uint _tokenId = _nextTokenId;

        _safeMint(msg.sender, _tokenId);
        _setTokenURI(_tokenId, tokenURI_);
        _nextTokenId++;

        return _tokenId;
    }

    function _beforeTokenTransfer(address, address to, uint) internal virtual override {
        address owner = owner();

        require(owner == msg.sender || _marketplace == msg.sender || to == _marketplace, 'The caller is not allowed to transfer the token.');
    }
}
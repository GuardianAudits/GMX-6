/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Market {
  export type PropsStruct = {
    marketToken: PromiseOrValue<string>;
    indexToken: PromiseOrValue<string>;
    longToken: PromiseOrValue<string>;
    shortToken: PromiseOrValue<string>;
  };

  export type PropsStructOutput = [string, string, string, string] & {
    marketToken: string;
    indexToken: string;
    longToken: string;
    shortToken: string;
  };
}

export declare namespace Price {
  export type PropsStruct = {
    min: PromiseOrValue<BigNumberish>;
    max: PromiseOrValue<BigNumberish>;
  };

  export type PropsStructOutput = [BigNumber, BigNumber] & {
    min: BigNumber;
    max: BigNumber;
  };
}

export declare namespace MarketPoolValueInfo {
  export type PropsStruct = {
    poolValue: PromiseOrValue<BigNumberish>;
    longPnl: PromiseOrValue<BigNumberish>;
    shortPnl: PromiseOrValue<BigNumberish>;
    netPnl: PromiseOrValue<BigNumberish>;
    longTokenAmount: PromiseOrValue<BigNumberish>;
    shortTokenAmount: PromiseOrValue<BigNumberish>;
    longTokenUsd: PromiseOrValue<BigNumberish>;
    shortTokenUsd: PromiseOrValue<BigNumberish>;
    totalBorrowingFees: PromiseOrValue<BigNumberish>;
    borrowingFeePoolFactor: PromiseOrValue<BigNumberish>;
    impactPoolAmount: PromiseOrValue<BigNumberish>;
  };

  export type PropsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    poolValue: BigNumber;
    longPnl: BigNumber;
    shortPnl: BigNumber;
    netPnl: BigNumber;
    longTokenAmount: BigNumber;
    shortTokenAmount: BigNumber;
    longTokenUsd: BigNumber;
    shortTokenUsd: BigNumber;
    totalBorrowingFees: BigNumber;
    borrowingFeePoolFactor: BigNumber;
    impactPoolAmount: BigNumber;
  };
}

export interface MarketUtilsInterface extends utils.Interface {
  functions: {
    "getMarketTokenPrice(DataStore,(address,address,address,address),(uint256,uint256),(uint256,uint256),(uint256,uint256),bytes32,bool)": FunctionFragment;
    "getPoolValueInfo(DataStore,(address,address,address,address),(uint256,uint256),(uint256,uint256),(uint256,uint256),bytes32,bool)": FunctionFragment;
    "validateMarketTokenBalance(DataStore,(address,address,address,address))": FunctionFragment;
    "validateMarketTokenBalance(DataStore,address)": FunctionFragment;
    "validateMarketTokenBalance(DataStore,(address,address,address,address)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getMarketTokenPrice"
      | "getPoolValueInfo"
      | "validateMarketTokenBalance(DataStore,(address,address,address,address))"
      | "validateMarketTokenBalance(DataStore,address)"
      | "validateMarketTokenBalance(DataStore,(address,address,address,address)[])"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getMarketTokenPrice",
    values: [
      PromiseOrValue<string>,
      Market.PropsStruct,
      Price.PropsStruct,
      Price.PropsStruct,
      Price.PropsStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolValueInfo",
    values: [
      PromiseOrValue<string>,
      Market.PropsStruct,
      Price.PropsStruct,
      Price.PropsStruct,
      Price.PropsStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateMarketTokenBalance(DataStore,(address,address,address,address))",
    values: [PromiseOrValue<string>, Market.PropsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "validateMarketTokenBalance(DataStore,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateMarketTokenBalance(DataStore,(address,address,address,address)[])",
    values: [PromiseOrValue<string>, Market.PropsStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getMarketTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolValueInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateMarketTokenBalance(DataStore,(address,address,address,address))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateMarketTokenBalance(DataStore,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateMarketTokenBalance(DataStore,(address,address,address,address)[])",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MarketUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getMarketTokenPrice(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      indexTokenPrice: Price.PropsStruct,
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      pnlFactorType: PromiseOrValue<BytesLike>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, MarketPoolValueInfo.PropsStructOutput]>;

    getPoolValueInfo(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      indexTokenPrice: Price.PropsStruct,
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      pnlFactorType: PromiseOrValue<BytesLike>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[MarketPoolValueInfo.PropsStructOutput]>;

    "validateMarketTokenBalance(DataStore,(address,address,address,address))"(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "validateMarketTokenBalance(DataStore,address)"(
      dataStore: PromiseOrValue<string>,
      _market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "validateMarketTokenBalance(DataStore,(address,address,address,address)[])"(
      dataStore: PromiseOrValue<string>,
      markets: Market.PropsStruct[],
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  getMarketTokenPrice(
    dataStore: PromiseOrValue<string>,
    market: Market.PropsStruct,
    indexTokenPrice: Price.PropsStruct,
    longTokenPrice: Price.PropsStruct,
    shortTokenPrice: Price.PropsStruct,
    pnlFactorType: PromiseOrValue<BytesLike>,
    maximize: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, MarketPoolValueInfo.PropsStructOutput]>;

  getPoolValueInfo(
    dataStore: PromiseOrValue<string>,
    market: Market.PropsStruct,
    indexTokenPrice: Price.PropsStruct,
    longTokenPrice: Price.PropsStruct,
    shortTokenPrice: Price.PropsStruct,
    pnlFactorType: PromiseOrValue<BytesLike>,
    maximize: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<MarketPoolValueInfo.PropsStructOutput>;

  "validateMarketTokenBalance(DataStore,(address,address,address,address))"(
    dataStore: PromiseOrValue<string>,
    market: Market.PropsStruct,
    overrides?: CallOverrides
  ): Promise<void>;

  "validateMarketTokenBalance(DataStore,address)"(
    dataStore: PromiseOrValue<string>,
    _market: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  "validateMarketTokenBalance(DataStore,(address,address,address,address)[])"(
    dataStore: PromiseOrValue<string>,
    markets: Market.PropsStruct[],
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    getMarketTokenPrice(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      indexTokenPrice: Price.PropsStruct,
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      pnlFactorType: PromiseOrValue<BytesLike>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, MarketPoolValueInfo.PropsStructOutput]>;

    getPoolValueInfo(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      indexTokenPrice: Price.PropsStruct,
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      pnlFactorType: PromiseOrValue<BytesLike>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<MarketPoolValueInfo.PropsStructOutput>;

    "validateMarketTokenBalance(DataStore,(address,address,address,address))"(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "validateMarketTokenBalance(DataStore,address)"(
      dataStore: PromiseOrValue<string>,
      _market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "validateMarketTokenBalance(DataStore,(address,address,address,address)[])"(
      dataStore: PromiseOrValue<string>,
      markets: Market.PropsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getMarketTokenPrice(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      indexTokenPrice: Price.PropsStruct,
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      pnlFactorType: PromiseOrValue<BytesLike>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolValueInfo(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      indexTokenPrice: Price.PropsStruct,
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      pnlFactorType: PromiseOrValue<BytesLike>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validateMarketTokenBalance(DataStore,(address,address,address,address))"(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validateMarketTokenBalance(DataStore,address)"(
      dataStore: PromiseOrValue<string>,
      _market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validateMarketTokenBalance(DataStore,(address,address,address,address)[])"(
      dataStore: PromiseOrValue<string>,
      markets: Market.PropsStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getMarketTokenPrice(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      indexTokenPrice: Price.PropsStruct,
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      pnlFactorType: PromiseOrValue<BytesLike>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolValueInfo(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      indexTokenPrice: Price.PropsStruct,
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      pnlFactorType: PromiseOrValue<BytesLike>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validateMarketTokenBalance(DataStore,(address,address,address,address))"(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validateMarketTokenBalance(DataStore,address)"(
      dataStore: PromiseOrValue<string>,
      _market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validateMarketTokenBalance(DataStore,(address,address,address,address)[])"(
      dataStore: PromiseOrValue<string>,
      markets: Market.PropsStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

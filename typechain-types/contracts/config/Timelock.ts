/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface TimelockInterface extends utils.Interface {
  functions: {
    "MAX_TIMELOCK_DELAY()": FunctionFragment;
    "addOracleSignerAfterSignal(address)": FunctionFragment;
    "cancelAction(bytes32)": FunctionFragment;
    "dataStore()": FunctionFragment;
    "eventEmitter()": FunctionFragment;
    "grantRoleAfterSignal(address,bytes32)": FunctionFragment;
    "increaseTimelockDelay(uint256)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "oracleStore()": FunctionFragment;
    "pendingActions(bytes32)": FunctionFragment;
    "removeOracleSignerAfterSignal(address)": FunctionFragment;
    "revokeRole(address,bytes32)": FunctionFragment;
    "revokeRoleAfterSignal(address,bytes32)": FunctionFragment;
    "roleStore()": FunctionFragment;
    "setFeeReceiverAfterSignal(address)": FunctionFragment;
    "setPriceFeedAfterSignal(address,address,uint256,uint256,uint256)": FunctionFragment;
    "signalAddOracleSigner(address)": FunctionFragment;
    "signalGrantRole(address,bytes32)": FunctionFragment;
    "signalRemoveOracleSigner(address)": FunctionFragment;
    "signalRevokeRole(address,bytes32)": FunctionFragment;
    "signalSetFeeReceiver(address)": FunctionFragment;
    "signalSetPriceFeed(address,address,uint256,uint256,uint256)": FunctionFragment;
    "timelockDelay()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_TIMELOCK_DELAY"
      | "addOracleSignerAfterSignal"
      | "cancelAction"
      | "dataStore"
      | "eventEmitter"
      | "grantRoleAfterSignal"
      | "increaseTimelockDelay"
      | "multicall"
      | "oracleStore"
      | "pendingActions"
      | "removeOracleSignerAfterSignal"
      | "revokeRole"
      | "revokeRoleAfterSignal"
      | "roleStore"
      | "setFeeReceiverAfterSignal"
      | "setPriceFeedAfterSignal"
      | "signalAddOracleSigner"
      | "signalGrantRole"
      | "signalRemoveOracleSigner"
      | "signalRevokeRole"
      | "signalSetFeeReceiver"
      | "signalSetPriceFeed"
      | "timelockDelay"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_TIMELOCK_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addOracleSignerAfterSignal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAction",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "dataStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eventEmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRoleAfterSignal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseTimelockDelay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingActions",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOracleSignerAfterSignal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRoleAfterSignal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setFeeReceiverAfterSignal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeedAfterSignal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signalAddOracleSigner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "signalGrantRole",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "signalRemoveOracleSigner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "signalRevokeRole",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "signalSetFeeReceiver",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "signalSetPriceFeed",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "timelockDelay",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_TIMELOCK_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOracleSignerAfterSignal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventEmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantRoleAfterSignal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseTimelockDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOracleSignerAfterSignal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeRoleAfterSignal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeReceiverAfterSignal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeedAfterSignal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalAddOracleSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalGrantRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalRemoveOracleSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalRevokeRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalSetFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalSetPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockDelay",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Timelock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TimelockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_TIMELOCK_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    addOracleSignerAfterSignal(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelAction(
      actionKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dataStore(overrides?: CallOverrides): Promise<[string]>;

    eventEmitter(overrides?: CallOverrides): Promise<[string]>;

    grantRoleAfterSignal(
      account: PromiseOrValue<string>,
      roleKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseTimelockDelay(
      _timelockDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    oracleStore(overrides?: CallOverrides): Promise<[string]>;

    pendingActions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeOracleSignerAfterSignal(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      account: PromiseOrValue<string>,
      roleKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRoleAfterSignal(
      account: PromiseOrValue<string>,
      roleKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roleStore(overrides?: CallOverrides): Promise<[string]>;

    setFeeReceiverAfterSignal(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceFeedAfterSignal(
      token: PromiseOrValue<string>,
      priceFeed: PromiseOrValue<string>,
      priceFeedMultiplier: PromiseOrValue<BigNumberish>,
      priceFeedHeartbeatDuration: PromiseOrValue<BigNumberish>,
      stablePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalAddOracleSigner(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalGrantRole(
      account: PromiseOrValue<string>,
      roleKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalRemoveOracleSigner(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalRevokeRole(
      account: PromiseOrValue<string>,
      roleKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalSetFeeReceiver(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalSetPriceFeed(
      token: PromiseOrValue<string>,
      priceFeed: PromiseOrValue<string>,
      priceFeedMultiplier: PromiseOrValue<BigNumberish>,
      priceFeedHeartbeatDuration: PromiseOrValue<BigNumberish>,
      stablePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timelockDelay(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  MAX_TIMELOCK_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  addOracleSignerAfterSignal(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelAction(
    actionKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dataStore(overrides?: CallOverrides): Promise<string>;

  eventEmitter(overrides?: CallOverrides): Promise<string>;

  grantRoleAfterSignal(
    account: PromiseOrValue<string>,
    roleKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseTimelockDelay(
    _timelockDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  oracleStore(overrides?: CallOverrides): Promise<string>;

  pendingActions(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeOracleSignerAfterSignal(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    account: PromiseOrValue<string>,
    roleKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRoleAfterSignal(
    account: PromiseOrValue<string>,
    roleKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roleStore(overrides?: CallOverrides): Promise<string>;

  setFeeReceiverAfterSignal(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceFeedAfterSignal(
    token: PromiseOrValue<string>,
    priceFeed: PromiseOrValue<string>,
    priceFeedMultiplier: PromiseOrValue<BigNumberish>,
    priceFeedHeartbeatDuration: PromiseOrValue<BigNumberish>,
    stablePrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalAddOracleSigner(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalGrantRole(
    account: PromiseOrValue<string>,
    roleKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalRemoveOracleSigner(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalRevokeRole(
    account: PromiseOrValue<string>,
    roleKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalSetFeeReceiver(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalSetPriceFeed(
    token: PromiseOrValue<string>,
    priceFeed: PromiseOrValue<string>,
    priceFeedMultiplier: PromiseOrValue<BigNumberish>,
    priceFeedHeartbeatDuration: PromiseOrValue<BigNumberish>,
    stablePrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timelockDelay(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    MAX_TIMELOCK_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    addOracleSignerAfterSignal(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelAction(
      actionKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    dataStore(overrides?: CallOverrides): Promise<string>;

    eventEmitter(overrides?: CallOverrides): Promise<string>;

    grantRoleAfterSignal(
      account: PromiseOrValue<string>,
      roleKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseTimelockDelay(
      _timelockDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    oracleStore(overrides?: CallOverrides): Promise<string>;

    pendingActions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeOracleSignerAfterSignal(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      account: PromiseOrValue<string>,
      roleKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRoleAfterSignal(
      account: PromiseOrValue<string>,
      roleKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    roleStore(overrides?: CallOverrides): Promise<string>;

    setFeeReceiverAfterSignal(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceFeedAfterSignal(
      token: PromiseOrValue<string>,
      priceFeed: PromiseOrValue<string>,
      priceFeedMultiplier: PromiseOrValue<BigNumberish>,
      priceFeedHeartbeatDuration: PromiseOrValue<BigNumberish>,
      stablePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalAddOracleSigner(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalGrantRole(
      account: PromiseOrValue<string>,
      roleKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalRemoveOracleSigner(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalRevokeRole(
      account: PromiseOrValue<string>,
      roleKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalSetFeeReceiver(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalSetPriceFeed(
      token: PromiseOrValue<string>,
      priceFeed: PromiseOrValue<string>,
      priceFeedMultiplier: PromiseOrValue<BigNumberish>,
      priceFeedHeartbeatDuration: PromiseOrValue<BigNumberish>,
      stablePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    timelockDelay(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    MAX_TIMELOCK_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    addOracleSignerAfterSignal(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelAction(
      actionKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dataStore(overrides?: CallOverrides): Promise<BigNumber>;

    eventEmitter(overrides?: CallOverrides): Promise<BigNumber>;

    grantRoleAfterSignal(
      account: PromiseOrValue<string>,
      roleKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseTimelockDelay(
      _timelockDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    oracleStore(overrides?: CallOverrides): Promise<BigNumber>;

    pendingActions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeOracleSignerAfterSignal(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      account: PromiseOrValue<string>,
      roleKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRoleAfterSignal(
      account: PromiseOrValue<string>,
      roleKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeReceiverAfterSignal(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceFeedAfterSignal(
      token: PromiseOrValue<string>,
      priceFeed: PromiseOrValue<string>,
      priceFeedMultiplier: PromiseOrValue<BigNumberish>,
      priceFeedHeartbeatDuration: PromiseOrValue<BigNumberish>,
      stablePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalAddOracleSigner(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalGrantRole(
      account: PromiseOrValue<string>,
      roleKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalRemoveOracleSigner(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalRevokeRole(
      account: PromiseOrValue<string>,
      roleKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalSetFeeReceiver(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalSetPriceFeed(
      token: PromiseOrValue<string>,
      priceFeed: PromiseOrValue<string>,
      priceFeedMultiplier: PromiseOrValue<BigNumberish>,
      priceFeedHeartbeatDuration: PromiseOrValue<BigNumberish>,
      stablePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timelockDelay(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_TIMELOCK_DELAY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addOracleSignerAfterSignal(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelAction(
      actionKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dataStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventEmitter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRoleAfterSignal(
      account: PromiseOrValue<string>,
      roleKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseTimelockDelay(
      _timelockDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    oracleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingActions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeOracleSignerAfterSignal(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      account: PromiseOrValue<string>,
      roleKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRoleAfterSignal(
      account: PromiseOrValue<string>,
      roleKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFeeReceiverAfterSignal(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceFeedAfterSignal(
      token: PromiseOrValue<string>,
      priceFeed: PromiseOrValue<string>,
      priceFeedMultiplier: PromiseOrValue<BigNumberish>,
      priceFeedHeartbeatDuration: PromiseOrValue<BigNumberish>,
      stablePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalAddOracleSigner(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalGrantRole(
      account: PromiseOrValue<string>,
      roleKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalRemoveOracleSigner(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalRevokeRole(
      account: PromiseOrValue<string>,
      roleKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalSetFeeReceiver(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalSetPriceFeed(
      token: PromiseOrValue<string>,
      priceFeed: PromiseOrValue<string>,
      priceFeedMultiplier: PromiseOrValue<BigNumberish>,
      priceFeedHeartbeatDuration: PromiseOrValue<BigNumberish>,
      stablePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timelockDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

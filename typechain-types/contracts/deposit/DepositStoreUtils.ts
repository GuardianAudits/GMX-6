/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Deposit {
  export type AddressesStruct = {
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    initialLongToken: PromiseOrValue<string>;
    initialShortToken: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    account: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialLongToken: string;
    initialShortToken: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type NumbersStruct = {
    initialLongTokenAmount: PromiseOrValue<BigNumberish>;
    initialShortTokenAmount: PromiseOrValue<BigNumberish>;
    minMarketTokens: PromiseOrValue<BigNumberish>;
    updatedAtBlock: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    initialLongTokenAmount: BigNumber;
    initialShortTokenAmount: BigNumber;
    minMarketTokens: BigNumber;
    updatedAtBlock: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
  };

  export type FlagsStruct = {
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
  };

  export type FlagsStructOutput = [boolean] & {
    shouldUnwrapNativeToken: boolean;
  };

  export type PropsStruct = {
    addresses: Deposit.AddressesStruct;
    numbers: Deposit.NumbersStruct;
    flags: Deposit.FlagsStruct;
  };

  export type PropsStructOutput = [
    Deposit.AddressesStructOutput,
    Deposit.NumbersStructOutput,
    Deposit.FlagsStructOutput
  ] & {
    addresses: Deposit.AddressesStructOutput;
    numbers: Deposit.NumbersStructOutput;
    flags: Deposit.FlagsStructOutput;
  };
}

export interface DepositStoreUtilsInterface extends utils.Interface {
  functions: {
    "ACCOUNT()": FunctionFragment;
    "CALLBACK_CONTRACT()": FunctionFragment;
    "CALLBACK_GAS_LIMIT()": FunctionFragment;
    "EXECUTION_FEE()": FunctionFragment;
    "INITIAL_LONG_TOKEN()": FunctionFragment;
    "INITIAL_LONG_TOKEN_AMOUNT()": FunctionFragment;
    "INITIAL_SHORT_TOKEN()": FunctionFragment;
    "INITIAL_SHORT_TOKEN_AMOUNT()": FunctionFragment;
    "LONG_TOKEN_SWAP_PATH()": FunctionFragment;
    "MARKET()": FunctionFragment;
    "MIN_MARKET_TOKENS()": FunctionFragment;
    "RECEIVER()": FunctionFragment;
    "SHORT_TOKEN_SWAP_PATH()": FunctionFragment;
    "SHOULD_UNWRAP_NATIVE_TOKEN()": FunctionFragment;
    "UI_FEE_RECEIVER()": FunctionFragment;
    "UPDATED_AT_BLOCK()": FunctionFragment;
    "get(DataStore,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ACCOUNT"
      | "CALLBACK_CONTRACT"
      | "CALLBACK_GAS_LIMIT"
      | "EXECUTION_FEE"
      | "INITIAL_LONG_TOKEN"
      | "INITIAL_LONG_TOKEN_AMOUNT"
      | "INITIAL_SHORT_TOKEN"
      | "INITIAL_SHORT_TOKEN_AMOUNT"
      | "LONG_TOKEN_SWAP_PATH"
      | "MARKET"
      | "MIN_MARKET_TOKENS"
      | "RECEIVER"
      | "SHORT_TOKEN_SWAP_PATH"
      | "SHOULD_UNWRAP_NATIVE_TOKEN"
      | "UI_FEE_RECEIVER"
      | "UPDATED_AT_BLOCK"
      | "get"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ACCOUNT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "CALLBACK_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CALLBACK_GAS_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EXECUTION_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_LONG_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_LONG_TOKEN_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_SHORT_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_SHORT_TOKEN_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LONG_TOKEN_SWAP_PATH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MARKET", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MIN_MARKET_TOKENS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "RECEIVER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SHORT_TOKEN_SWAP_PATH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SHOULD_UNWRAP_NATIVE_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UI_FEE_RECEIVER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATED_AT_BLOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "ACCOUNT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CALLBACK_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CALLBACK_GAS_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXECUTION_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_LONG_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_LONG_TOKEN_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_SHORT_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_SHORT_TOKEN_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LONG_TOKEN_SWAP_PATH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MARKET", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_MARKET_TOKENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "RECEIVER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SHORT_TOKEN_SWAP_PATH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SHOULD_UNWRAP_NATIVE_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UI_FEE_RECEIVER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPDATED_AT_BLOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;

  events: {};
}

export interface DepositStoreUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DepositStoreUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ACCOUNT(overrides?: CallOverrides): Promise<[string]>;

    CALLBACK_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    CALLBACK_GAS_LIMIT(overrides?: CallOverrides): Promise<[string]>;

    EXECUTION_FEE(overrides?: CallOverrides): Promise<[string]>;

    INITIAL_LONG_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    INITIAL_LONG_TOKEN_AMOUNT(overrides?: CallOverrides): Promise<[string]>;

    INITIAL_SHORT_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    INITIAL_SHORT_TOKEN_AMOUNT(overrides?: CallOverrides): Promise<[string]>;

    LONG_TOKEN_SWAP_PATH(overrides?: CallOverrides): Promise<[string]>;

    MARKET(overrides?: CallOverrides): Promise<[string]>;

    MIN_MARKET_TOKENS(overrides?: CallOverrides): Promise<[string]>;

    RECEIVER(overrides?: CallOverrides): Promise<[string]>;

    SHORT_TOKEN_SWAP_PATH(overrides?: CallOverrides): Promise<[string]>;

    SHOULD_UNWRAP_NATIVE_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    UI_FEE_RECEIVER(overrides?: CallOverrides): Promise<[string]>;

    UPDATED_AT_BLOCK(overrides?: CallOverrides): Promise<[string]>;

    get(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[Deposit.PropsStructOutput]>;
  };

  ACCOUNT(overrides?: CallOverrides): Promise<string>;

  CALLBACK_CONTRACT(overrides?: CallOverrides): Promise<string>;

  CALLBACK_GAS_LIMIT(overrides?: CallOverrides): Promise<string>;

  EXECUTION_FEE(overrides?: CallOverrides): Promise<string>;

  INITIAL_LONG_TOKEN(overrides?: CallOverrides): Promise<string>;

  INITIAL_LONG_TOKEN_AMOUNT(overrides?: CallOverrides): Promise<string>;

  INITIAL_SHORT_TOKEN(overrides?: CallOverrides): Promise<string>;

  INITIAL_SHORT_TOKEN_AMOUNT(overrides?: CallOverrides): Promise<string>;

  LONG_TOKEN_SWAP_PATH(overrides?: CallOverrides): Promise<string>;

  MARKET(overrides?: CallOverrides): Promise<string>;

  MIN_MARKET_TOKENS(overrides?: CallOverrides): Promise<string>;

  RECEIVER(overrides?: CallOverrides): Promise<string>;

  SHORT_TOKEN_SWAP_PATH(overrides?: CallOverrides): Promise<string>;

  SHOULD_UNWRAP_NATIVE_TOKEN(overrides?: CallOverrides): Promise<string>;

  UI_FEE_RECEIVER(overrides?: CallOverrides): Promise<string>;

  UPDATED_AT_BLOCK(overrides?: CallOverrides): Promise<string>;

  get(
    dataStore: PromiseOrValue<string>,
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<Deposit.PropsStructOutput>;

  callStatic: {
    ACCOUNT(overrides?: CallOverrides): Promise<string>;

    CALLBACK_CONTRACT(overrides?: CallOverrides): Promise<string>;

    CALLBACK_GAS_LIMIT(overrides?: CallOverrides): Promise<string>;

    EXECUTION_FEE(overrides?: CallOverrides): Promise<string>;

    INITIAL_LONG_TOKEN(overrides?: CallOverrides): Promise<string>;

    INITIAL_LONG_TOKEN_AMOUNT(overrides?: CallOverrides): Promise<string>;

    INITIAL_SHORT_TOKEN(overrides?: CallOverrides): Promise<string>;

    INITIAL_SHORT_TOKEN_AMOUNT(overrides?: CallOverrides): Promise<string>;

    LONG_TOKEN_SWAP_PATH(overrides?: CallOverrides): Promise<string>;

    MARKET(overrides?: CallOverrides): Promise<string>;

    MIN_MARKET_TOKENS(overrides?: CallOverrides): Promise<string>;

    RECEIVER(overrides?: CallOverrides): Promise<string>;

    SHORT_TOKEN_SWAP_PATH(overrides?: CallOverrides): Promise<string>;

    SHOULD_UNWRAP_NATIVE_TOKEN(overrides?: CallOverrides): Promise<string>;

    UI_FEE_RECEIVER(overrides?: CallOverrides): Promise<string>;

    UPDATED_AT_BLOCK(overrides?: CallOverrides): Promise<string>;

    get(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<Deposit.PropsStructOutput>;
  };

  filters: {};

  estimateGas: {
    ACCOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    CALLBACK_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    CALLBACK_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    EXECUTION_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    INITIAL_LONG_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    INITIAL_LONG_TOKEN_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    INITIAL_SHORT_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    INITIAL_SHORT_TOKEN_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    LONG_TOKEN_SWAP_PATH(overrides?: CallOverrides): Promise<BigNumber>;

    MARKET(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_MARKET_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    RECEIVER(overrides?: CallOverrides): Promise<BigNumber>;

    SHORT_TOKEN_SWAP_PATH(overrides?: CallOverrides): Promise<BigNumber>;

    SHOULD_UNWRAP_NATIVE_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    UI_FEE_RECEIVER(overrides?: CallOverrides): Promise<BigNumber>;

    UPDATED_AT_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

    get(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ACCOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CALLBACK_CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CALLBACK_GAS_LIMIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EXECUTION_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INITIAL_LONG_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INITIAL_LONG_TOKEN_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INITIAL_SHORT_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INITIAL_SHORT_TOKEN_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LONG_TOKEN_SWAP_PATH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MARKET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_MARKET_TOKENS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RECEIVER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SHORT_TOKEN_SWAP_PATH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SHOULD_UNWRAP_NATIVE_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UI_FEE_RECEIVER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UPDATED_AT_BLOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

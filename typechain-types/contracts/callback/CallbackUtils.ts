/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Deposit {
  export type AddressesStruct = {
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    initialLongToken: PromiseOrValue<string>;
    initialShortToken: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    account: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialLongToken: string;
    initialShortToken: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type NumbersStruct = {
    initialLongTokenAmount: PromiseOrValue<BigNumberish>;
    initialShortTokenAmount: PromiseOrValue<BigNumberish>;
    minMarketTokens: PromiseOrValue<BigNumberish>;
    updatedAtBlock: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    initialLongTokenAmount: BigNumber;
    initialShortTokenAmount: BigNumber;
    minMarketTokens: BigNumber;
    updatedAtBlock: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
  };

  export type FlagsStruct = {
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
  };

  export type FlagsStructOutput = [boolean] & {
    shouldUnwrapNativeToken: boolean;
  };

  export type PropsStruct = {
    addresses: Deposit.AddressesStruct;
    numbers: Deposit.NumbersStruct;
    flags: Deposit.FlagsStruct;
  };

  export type PropsStructOutput = [
    Deposit.AddressesStructOutput,
    Deposit.NumbersStructOutput,
    Deposit.FlagsStructOutput
  ] & {
    addresses: Deposit.AddressesStructOutput;
    numbers: Deposit.NumbersStructOutput;
    flags: Deposit.FlagsStructOutput;
  };
}

export declare namespace Order {
  export type AddressesStruct = {
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    initialCollateralToken: PromiseOrValue<string>;
    swapPath: PromiseOrValue<string>[];
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string[]
  ] & {
    account: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialCollateralToken: string;
    swapPath: string[];
  };

  export type NumbersStruct = {
    orderType: PromiseOrValue<BigNumberish>;
    decreasePositionSwapType: PromiseOrValue<BigNumberish>;
    sizeDeltaUsd: PromiseOrValue<BigNumberish>;
    initialCollateralDeltaAmount: PromiseOrValue<BigNumberish>;
    triggerPrice: PromiseOrValue<BigNumberish>;
    acceptablePrice: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    minOutputAmount: PromiseOrValue<BigNumberish>;
    updatedAtBlock: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    orderType: number;
    decreasePositionSwapType: number;
    sizeDeltaUsd: BigNumber;
    initialCollateralDeltaAmount: BigNumber;
    triggerPrice: BigNumber;
    acceptablePrice: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    minOutputAmount: BigNumber;
    updatedAtBlock: BigNumber;
  };

  export type FlagsStruct = {
    isLong: PromiseOrValue<boolean>;
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    isFrozen: PromiseOrValue<boolean>;
  };

  export type FlagsStructOutput = [boolean, boolean, boolean] & {
    isLong: boolean;
    shouldUnwrapNativeToken: boolean;
    isFrozen: boolean;
  };

  export type PropsStruct = {
    addresses: Order.AddressesStruct;
    numbers: Order.NumbersStruct;
    flags: Order.FlagsStruct;
  };

  export type PropsStructOutput = [
    Order.AddressesStructOutput,
    Order.NumbersStructOutput,
    Order.FlagsStructOutput
  ] & {
    addresses: Order.AddressesStructOutput;
    numbers: Order.NumbersStructOutput;
    flags: Order.FlagsStructOutput;
  };
}

export declare namespace Withdrawal {
  export type AddressesStruct = {
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    account: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type NumbersStruct = {
    marketTokenAmount: PromiseOrValue<BigNumberish>;
    minLongTokenAmount: PromiseOrValue<BigNumberish>;
    minShortTokenAmount: PromiseOrValue<BigNumberish>;
    updatedAtBlock: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    marketTokenAmount: BigNumber;
    minLongTokenAmount: BigNumber;
    minShortTokenAmount: BigNumber;
    updatedAtBlock: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
  };

  export type FlagsStruct = {
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
  };

  export type FlagsStructOutput = [boolean] & {
    shouldUnwrapNativeToken: boolean;
  };

  export type PropsStruct = {
    addresses: Withdrawal.AddressesStruct;
    numbers: Withdrawal.NumbersStruct;
    flags: Withdrawal.FlagsStruct;
  };

  export type PropsStructOutput = [
    Withdrawal.AddressesStructOutput,
    Withdrawal.NumbersStructOutput,
    Withdrawal.FlagsStructOutput
  ] & {
    addresses: Withdrawal.AddressesStructOutput;
    numbers: Withdrawal.NumbersStructOutput;
    flags: Withdrawal.FlagsStructOutput;
  };
}

export interface CallbackUtilsInterface extends utils.Interface {
  functions: {};

  events: {
    "AfterDepositCancellationError(bytes32,tuple)": EventFragment;
    "AfterDepositExecutionError(bytes32,tuple)": EventFragment;
    "AfterOrderCancellationError(bytes32,tuple)": EventFragment;
    "AfterOrderExecutionError(bytes32,tuple)": EventFragment;
    "AfterOrderFrozenError(bytes32,tuple)": EventFragment;
    "AfterWithdrawalCancellationError(bytes32,tuple)": EventFragment;
    "AfterWithdrawalExecutionError(bytes32,tuple)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AfterDepositCancellationError"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AfterDepositExecutionError"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AfterOrderCancellationError"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AfterOrderExecutionError"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AfterOrderFrozenError"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AfterWithdrawalCancellationError"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AfterWithdrawalExecutionError"
  ): EventFragment;
}

export interface AfterDepositCancellationErrorEventObject {
  key: string;
  deposit: Deposit.PropsStructOutput;
}
export type AfterDepositCancellationErrorEvent = TypedEvent<
  [string, Deposit.PropsStructOutput],
  AfterDepositCancellationErrorEventObject
>;

export type AfterDepositCancellationErrorEventFilter =
  TypedEventFilter<AfterDepositCancellationErrorEvent>;

export interface AfterDepositExecutionErrorEventObject {
  key: string;
  deposit: Deposit.PropsStructOutput;
}
export type AfterDepositExecutionErrorEvent = TypedEvent<
  [string, Deposit.PropsStructOutput],
  AfterDepositExecutionErrorEventObject
>;

export type AfterDepositExecutionErrorEventFilter =
  TypedEventFilter<AfterDepositExecutionErrorEvent>;

export interface AfterOrderCancellationErrorEventObject {
  key: string;
  order: Order.PropsStructOutput;
}
export type AfterOrderCancellationErrorEvent = TypedEvent<
  [string, Order.PropsStructOutput],
  AfterOrderCancellationErrorEventObject
>;

export type AfterOrderCancellationErrorEventFilter =
  TypedEventFilter<AfterOrderCancellationErrorEvent>;

export interface AfterOrderExecutionErrorEventObject {
  key: string;
  order: Order.PropsStructOutput;
}
export type AfterOrderExecutionErrorEvent = TypedEvent<
  [string, Order.PropsStructOutput],
  AfterOrderExecutionErrorEventObject
>;

export type AfterOrderExecutionErrorEventFilter =
  TypedEventFilter<AfterOrderExecutionErrorEvent>;

export interface AfterOrderFrozenErrorEventObject {
  key: string;
  order: Order.PropsStructOutput;
}
export type AfterOrderFrozenErrorEvent = TypedEvent<
  [string, Order.PropsStructOutput],
  AfterOrderFrozenErrorEventObject
>;

export type AfterOrderFrozenErrorEventFilter =
  TypedEventFilter<AfterOrderFrozenErrorEvent>;

export interface AfterWithdrawalCancellationErrorEventObject {
  key: string;
  withdrawal: Withdrawal.PropsStructOutput;
}
export type AfterWithdrawalCancellationErrorEvent = TypedEvent<
  [string, Withdrawal.PropsStructOutput],
  AfterWithdrawalCancellationErrorEventObject
>;

export type AfterWithdrawalCancellationErrorEventFilter =
  TypedEventFilter<AfterWithdrawalCancellationErrorEvent>;

export interface AfterWithdrawalExecutionErrorEventObject {
  key: string;
  withdrawal: Withdrawal.PropsStructOutput;
}
export type AfterWithdrawalExecutionErrorEvent = TypedEvent<
  [string, Withdrawal.PropsStructOutput],
  AfterWithdrawalExecutionErrorEventObject
>;

export type AfterWithdrawalExecutionErrorEventFilter =
  TypedEventFilter<AfterWithdrawalExecutionErrorEvent>;

export interface CallbackUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CallbackUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AfterDepositCancellationError(bytes32,tuple)"(
      key?: null,
      deposit?: null
    ): AfterDepositCancellationErrorEventFilter;
    AfterDepositCancellationError(
      key?: null,
      deposit?: null
    ): AfterDepositCancellationErrorEventFilter;

    "AfterDepositExecutionError(bytes32,tuple)"(
      key?: null,
      deposit?: null
    ): AfterDepositExecutionErrorEventFilter;
    AfterDepositExecutionError(
      key?: null,
      deposit?: null
    ): AfterDepositExecutionErrorEventFilter;

    "AfterOrderCancellationError(bytes32,tuple)"(
      key?: null,
      order?: null
    ): AfterOrderCancellationErrorEventFilter;
    AfterOrderCancellationError(
      key?: null,
      order?: null
    ): AfterOrderCancellationErrorEventFilter;

    "AfterOrderExecutionError(bytes32,tuple)"(
      key?: null,
      order?: null
    ): AfterOrderExecutionErrorEventFilter;
    AfterOrderExecutionError(
      key?: null,
      order?: null
    ): AfterOrderExecutionErrorEventFilter;

    "AfterOrderFrozenError(bytes32,tuple)"(
      key?: null,
      order?: null
    ): AfterOrderFrozenErrorEventFilter;
    AfterOrderFrozenError(
      key?: null,
      order?: null
    ): AfterOrderFrozenErrorEventFilter;

    "AfterWithdrawalCancellationError(bytes32,tuple)"(
      key?: null,
      withdrawal?: null
    ): AfterWithdrawalCancellationErrorEventFilter;
    AfterWithdrawalCancellationError(
      key?: null,
      withdrawal?: null
    ): AfterWithdrawalCancellationErrorEventFilter;

    "AfterWithdrawalExecutionError(bytes32,tuple)"(
      key?: null,
      withdrawal?: null
    ): AfterWithdrawalExecutionErrorEventFilter;
    AfterWithdrawalExecutionError(
      key?: null,
      withdrawal?: null
    ): AfterWithdrawalExecutionErrorEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}

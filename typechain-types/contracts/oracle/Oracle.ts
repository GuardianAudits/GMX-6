/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Price {
  export type PropsStruct = {
    min: PromiseOrValue<BigNumberish>;
    max: PromiseOrValue<BigNumberish>;
  };

  export type PropsStructOutput = [BigNumber, BigNumber] & {
    min: BigNumber;
    max: BigNumber;
  };
}

export declare namespace OracleUtils {
  export type SetPricesParamsStruct = {
    signerInfo: PromiseOrValue<BigNumberish>;
    tokens: PromiseOrValue<string>[];
    compactedMinOracleBlockNumbers: PromiseOrValue<BigNumberish>[];
    compactedMaxOracleBlockNumbers: PromiseOrValue<BigNumberish>[];
    compactedOracleTimestamps: PromiseOrValue<BigNumberish>[];
    compactedDecimals: PromiseOrValue<BigNumberish>[];
    compactedMinPrices: PromiseOrValue<BigNumberish>[];
    compactedMinPricesIndexes: PromiseOrValue<BigNumberish>[];
    compactedMaxPrices: PromiseOrValue<BigNumberish>[];
    compactedMaxPricesIndexes: PromiseOrValue<BigNumberish>[];
    signatures: PromiseOrValue<BytesLike>[];
    priceFeedTokens: PromiseOrValue<string>[];
  };

  export type SetPricesParamsStructOutput = [
    BigNumber,
    string[],
    BigNumber[],
    BigNumber[],
    BigNumber[],
    BigNumber[],
    BigNumber[],
    BigNumber[],
    BigNumber[],
    BigNumber[],
    string[],
    string[]
  ] & {
    signerInfo: BigNumber;
    tokens: string[];
    compactedMinOracleBlockNumbers: BigNumber[];
    compactedMaxOracleBlockNumbers: BigNumber[];
    compactedOracleTimestamps: BigNumber[];
    compactedDecimals: BigNumber[];
    compactedMinPrices: BigNumber[];
    compactedMinPricesIndexes: BigNumber[];
    compactedMaxPrices: BigNumber[];
    compactedMaxPricesIndexes: BigNumber[];
    signatures: string[];
    priceFeedTokens: string[];
  };
}

export interface OracleInterface extends utils.Interface {
  functions: {
    "MAX_SIGNERS()": FunctionFragment;
    "MAX_SIGNER_INDEX()": FunctionFragment;
    "SIGNER_INDEX_LENGTH()": FunctionFragment;
    "clearAllPrices()": FunctionFragment;
    "getPriceFeedMultiplier(address,address)": FunctionFragment;
    "getPrimaryPrice(address)": FunctionFragment;
    "getStablePrice(address,address)": FunctionFragment;
    "getTokensWithPrices(uint256,uint256)": FunctionFragment;
    "getTokensWithPricesCount()": FunctionFragment;
    "oracleStore()": FunctionFragment;
    "primaryPrices(address)": FunctionFragment;
    "roleStore()": FunctionFragment;
    "setPrices(address,address,(uint256,address[],uint256[],uint256[],uint256[],uint256[],uint256[],uint256[],uint256[],uint256[],bytes[],address[]))": FunctionFragment;
    "setPrimaryPrice(address,(uint256,uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_SIGNERS"
      | "MAX_SIGNER_INDEX"
      | "SIGNER_INDEX_LENGTH"
      | "clearAllPrices"
      | "getPriceFeedMultiplier"
      | "getPrimaryPrice"
      | "getStablePrice"
      | "getTokensWithPrices"
      | "getTokensWithPricesCount"
      | "oracleStore"
      | "primaryPrices"
      | "roleStore"
      | "setPrices"
      | "setPrimaryPrice"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_SIGNERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SIGNER_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SIGNER_INDEX_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "clearAllPrices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceFeedMultiplier",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrimaryPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStablePrice",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensWithPrices",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensWithPricesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "primaryPrices",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setPrices",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      OracleUtils.SetPricesParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrimaryPrice",
    values: [PromiseOrValue<string>, Price.PropsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_SIGNERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SIGNER_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SIGNER_INDEX_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearAllPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceFeedMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrimaryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStablePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensWithPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensWithPricesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "primaryPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPrices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPrimaryPrice",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Oracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_SIGNERS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_SIGNER_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    SIGNER_INDEX_LENGTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    clearAllPrices(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPriceFeedMultiplier(
      dataStore: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPrimaryPrice(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Price.PropsStructOutput]>;

    getStablePrice(
      dataStore: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokensWithPrices(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getTokensWithPricesCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    oracleStore(overrides?: CallOverrides): Promise<[string]>;

    primaryPrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    roleStore(overrides?: CallOverrides): Promise<[string]>;

    setPrices(
      dataStore: PromiseOrValue<string>,
      eventEmitter: PromiseOrValue<string>,
      params: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPrimaryPrice(
      token: PromiseOrValue<string>,
      price: Price.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_SIGNERS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_SIGNER_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  SIGNER_INDEX_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

  clearAllPrices(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPriceFeedMultiplier(
    dataStore: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrimaryPrice(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Price.PropsStructOutput>;

  getStablePrice(
    dataStore: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokensWithPrices(
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getTokensWithPricesCount(overrides?: CallOverrides): Promise<BigNumber>;

  oracleStore(overrides?: CallOverrides): Promise<string>;

  primaryPrices(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

  roleStore(overrides?: CallOverrides): Promise<string>;

  setPrices(
    dataStore: PromiseOrValue<string>,
    eventEmitter: PromiseOrValue<string>,
    params: OracleUtils.SetPricesParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPrimaryPrice(
    token: PromiseOrValue<string>,
    price: Price.PropsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_SIGNERS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SIGNER_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    SIGNER_INDEX_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    clearAllPrices(overrides?: CallOverrides): Promise<void>;

    getPriceFeedMultiplier(
      dataStore: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrimaryPrice(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Price.PropsStructOutput>;

    getStablePrice(
      dataStore: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensWithPrices(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getTokensWithPricesCount(overrides?: CallOverrides): Promise<BigNumber>;

    oracleStore(overrides?: CallOverrides): Promise<string>;

    primaryPrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    roleStore(overrides?: CallOverrides): Promise<string>;

    setPrices(
      dataStore: PromiseOrValue<string>,
      eventEmitter: PromiseOrValue<string>,
      params: OracleUtils.SetPricesParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrimaryPrice(
      token: PromiseOrValue<string>,
      price: Price.PropsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    MAX_SIGNERS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SIGNER_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    SIGNER_INDEX_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    clearAllPrices(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPriceFeedMultiplier(
      dataStore: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrimaryPrice(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStablePrice(
      dataStore: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensWithPrices(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensWithPricesCount(overrides?: CallOverrides): Promise<BigNumber>;

    oracleStore(overrides?: CallOverrides): Promise<BigNumber>;

    primaryPrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<BigNumber>;

    setPrices(
      dataStore: PromiseOrValue<string>,
      eventEmitter: PromiseOrValue<string>,
      params: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPrimaryPrice(
      token: PromiseOrValue<string>,
      price: Price.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_SIGNERS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_SIGNER_INDEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SIGNER_INDEX_LENGTH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clearAllPrices(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPriceFeedMultiplier(
      dataStore: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrimaryPrice(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStablePrice(
      dataStore: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensWithPrices(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensWithPricesCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    primaryPrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPrices(
      dataStore: PromiseOrValue<string>,
      eventEmitter: PromiseOrValue<string>,
      params: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPrimaryPrice(
      token: PromiseOrValue<string>,
      price: Price.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  GasUsageTest,
  GasUsageTestInterface,
} from "../../../../contracts/test/GasUsageTest.sol/GasUsageTest";

const _abi = [
  {
    inputs: [],
    name: "getGasUsageForExternalLibraryCall",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610119806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806345df35ed14602d575b600080fd5b6033604c565b6040805192835260208301919091520160405180910390f35b60008060005a9050600073__$d5fe2184fd557652235d4965e7a35cceb3$__6351be4eaa6040518163ffffffff1660e01b8152600401602060405180830381865af4158015609e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019060c0919060cb565b919491935090915050565b60006020828403121560dc57600080fd5b505191905056fea264697066735822122076fc7980852956f66c74624f841681851ab4d544f55eaf30386705443e1eba3564736f6c63430008120033";

type GasUsageTestConstructorParams =
  | [linkLibraryAddresses: GasUsageTestLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GasUsageTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class GasUsageTest__factory extends ContractFactory {
  constructor(...args: GasUsageTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        GasUsageTest__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: GasUsageTestLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$d5fe2184fd557652235d4965e7a35cceb3\\$__", "g"),
      linkLibraryAddresses["contracts/test/GasUsageTest.sol:GasUsageTestLib"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GasUsageTest> {
    return super.deploy(overrides || {}) as Promise<GasUsageTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GasUsageTest {
    return super.attach(address) as GasUsageTest;
  }
  override connect(signer: Signer): GasUsageTest__factory {
    return super.connect(signer) as GasUsageTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GasUsageTestInterface {
    return new utils.Interface(_abi) as GasUsageTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GasUsageTest {
    return new Contract(address, _abi, signerOrProvider) as GasUsageTest;
  }
}

export interface GasUsageTestLibraryAddresses {
  ["contracts/test/GasUsageTest.sol:GasUsageTestLib"]: string;
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  PositionUtils,
  PositionUtilsInterface,
} from "../../../contracts/position/PositionUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "DisabledMarket",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyMarket",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "InvalidCollateralTokenForMarket",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "sizeInUsd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "sizeInTokens",
        type: "uint256",
      },
    ],
    name: "InvalidPositionSizeValues",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "LiquidatablePosition",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "positionSizeInUsd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minPositionSizeUsd",
        type: "uint256",
      },
    ],
    name: "MinPositionSize",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "PRBMathUD60x18__Exp2InputTooBig",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "PRBMathUD60x18__LogInputTooSmall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256",
      },
    ],
    name: "PRBMath__MulDivFixedPointOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "UnableToGetCachedTokenPrice",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "positionBorrowingFactor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "cumulativeBorrowingFactor",
        type: "uint256",
      },
    ],
    name: "UnexpectedBorrowingFactor",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "usdDelta",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "longOpenInterest",
        type: "uint256",
      },
    ],
    name: "UsdDeltaExceedsLongOpenInterest",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "usdDelta",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "shortOpenInterest",
        type: "uint256",
      },
    ],
    name: "UsdDeltaExceedsShortOpenInterest",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "DataStore",
      },
      {
        components: [
          {
            internalType: "address",
            name: "marketToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "indexToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "longToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "shortToken",
            type: "address",
          },
        ],
        internalType: "struct Market.Props",
        name: "market",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "indexTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "longTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "shortTokenPrice",
            type: "tuple",
          },
        ],
        internalType: "struct MarketUtils.MarketPrices",
        name: "prices",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "account",
                type: "address",
              },
              {
                internalType: "address",
                name: "market",
                type: "address",
              },
              {
                internalType: "address",
                name: "collateralToken",
                type: "address",
              },
            ],
            internalType: "struct Position.Addresses",
            name: "addresses",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "sizeInUsd",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "sizeInTokens",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "collateralAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowingFactor",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "fundingFeeAmountPerSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "longTokenClaimableFundingAmountPerSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "shortTokenClaimableFundingAmountPerSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "increasedAtBlock",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "decreasedAtBlock",
                type: "uint256",
              },
            ],
            internalType: "struct Position.Numbers",
            name: "numbers",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "isLong",
                type: "bool",
              },
            ],
            internalType: "struct Position.Flags",
            name: "flags",
            type: "tuple",
          },
        ],
        internalType: "struct Position.Props",
        name: "position",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "executionPrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "sizeDeltaUsd",
        type: "uint256",
      },
    ],
    name: "getPositionPnlUsd",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "DataStore",
      },
      {
        internalType: "contract IReferralStorage",
        name: "referralStorage",
        type: "IReferralStorage",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "account",
                type: "address",
              },
              {
                internalType: "address",
                name: "market",
                type: "address",
              },
              {
                internalType: "address",
                name: "collateralToken",
                type: "address",
              },
            ],
            internalType: "struct Position.Addresses",
            name: "addresses",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "sizeInUsd",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "sizeInTokens",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "collateralAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowingFactor",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "fundingFeeAmountPerSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "longTokenClaimableFundingAmountPerSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "shortTokenClaimableFundingAmountPerSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "increasedAtBlock",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "decreasedAtBlock",
                type: "uint256",
              },
            ],
            internalType: "struct Position.Numbers",
            name: "numbers",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "isLong",
                type: "bool",
              },
            ],
            internalType: "struct Position.Flags",
            name: "flags",
            type: "tuple",
          },
        ],
        internalType: "struct Position.Props",
        name: "position",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "marketToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "indexToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "longToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "shortToken",
            type: "address",
          },
        ],
        internalType: "struct Market.Props",
        name: "market",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "indexTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "longTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "shortTokenPrice",
            type: "tuple",
          },
        ],
        internalType: "struct MarketUtils.MarketPrices",
        name: "prices",
        type: "tuple",
      },
      {
        internalType: "bool",
        name: "shouldValidateMinCollateralUsd",
        type: "bool",
      },
    ],
    name: "isPositionLiquidatable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "DataStore",
      },
      {
        internalType: "contract IReferralStorage",
        name: "referralStorage",
        type: "IReferralStorage",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "account",
                type: "address",
              },
              {
                internalType: "address",
                name: "market",
                type: "address",
              },
              {
                internalType: "address",
                name: "collateralToken",
                type: "address",
              },
            ],
            internalType: "struct Position.Addresses",
            name: "addresses",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "sizeInUsd",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "sizeInTokens",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "collateralAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowingFactor",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "fundingFeeAmountPerSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "longTokenClaimableFundingAmountPerSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "shortTokenClaimableFundingAmountPerSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "increasedAtBlock",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "decreasedAtBlock",
                type: "uint256",
              },
            ],
            internalType: "struct Position.Numbers",
            name: "numbers",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "isLong",
                type: "bool",
              },
            ],
            internalType: "struct Position.Flags",
            name: "flags",
            type: "tuple",
          },
        ],
        internalType: "struct Position.Props",
        name: "position",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "marketToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "indexToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "longToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "shortToken",
            type: "address",
          },
        ],
        internalType: "struct Market.Props",
        name: "market",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "indexTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "longTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "shortTokenPrice",
            type: "tuple",
          },
        ],
        internalType: "struct MarketUtils.MarketPrices",
        name: "prices",
        type: "tuple",
      },
      {
        internalType: "bool",
        name: "shouldValidateMinPositionSize",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "shouldValidateMinCollateralUsd",
        type: "bool",
      },
    ],
    name: "validatePosition",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "DataStore",
      },
      {
        components: [
          {
            internalType: "address",
            name: "marketToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "indexToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "longToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "shortToken",
            type: "address",
          },
        ],
        internalType: "struct Market.Props",
        name: "market",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "indexTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "longTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "shortTokenPrice",
            type: "tuple",
          },
        ],
        internalType: "struct MarketUtils.MarketPrices",
        name: "prices",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "collateralToken",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isLong",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "positionSizeInUsd",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "positionCollateralAmount",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "realizedPnlUsd",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "openInterestDelta",
            type: "int256",
          },
        ],
        internalType:
          "struct PositionUtils.WillPositionCollateralBeSufficientValues",
        name: "values",
        type: "tuple",
      },
    ],
    name: "willPositionCollateralBeSufficient",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x61406d61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c806387b5cfbc1461005b578063d7e3321114610085578063dac648571461009a578063f8b56334146100c4575b600080fd5b61006e610069366004613b28565b6100e5565b60405161007c929190613b97565b60405180910390f35b610098610093366004613ba5565b6103e7565b005b6100ad6100a8366004613c3d565b610594565b60408051921515835260208301919091520161007c565b6100d76100d2366004613cf8565b61065e565b60405161007c929190613dc1565b600080610147604051806101400160405280600081526020016000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6101698561015a88602090810151015190565b6101649190613df2565b610a79565b815260408601515161019557805161018661016488602001515190565b6101909190613e09565b6101b0565b6101a461016487602001515190565b81516101b09190613e09565b6020820181905260001215610325576040860151516101d35787606001516101d9565b87604001515b6001600160a01b0316604082018190526101f6908a908a90610ae7565b606082015260408601515161021057604087015151610217565b6020870151515b60808201819052606082015161022d9190613df2565b60a0820152865161024f908a908a906102488a604001515190565b6001610b90565b60c082015287516040870151516102c5918b918460c001518560a001516040516020016102aa906020808252601a90820152794d41585f504e4c5f464143544f525f464f525f5452414445525360301b604082015260600190565b60405160208183030381529060405280519060200120610c1e565b60e0820181905260c0820151148015906102e3575060008160e00151135b80156102f3575060008160c00151135b156103255761031f6103088260200151610c6e565b8260e0015161031a8460c00151610c6e565b610cc0565b60208201525b8361033287602001515190565b0361034b5760208087015101515b6101008201526103a5565b6040860151511561037e576103408461036988602090810151015190565b6103739190613df2565b602088015151610d00565b6020868101518051910151610394908690613df2565b61039e9190613e46565b6101008201525b6103c781602001518261010001516103c289602090810151015190565b610d2c565b61012082018190526101009091015190925090505b965096945050505050565b60208501515115806103fe57506020808601510151155b1561043257602085810151805191015160405163bff65b3f60e01b8152610429929190600401613b97565b60405180910390fd5b610440878560000151610d41565b6104558461045087516040015190565b610dcf565b8115610553576000876001600160a01b031663bd02d0f56040516020016104a59060208082526015908201527413525397d413d4d2551253d397d4d2569157d554d1605a1b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016104d991815260200190565b602060405180830381865afa1580156104f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051a9190613e68565b90508061052987602001515190565b101561055157602086015151816040516342f7d98d60e11b8152600401610429929190613b97565b505b60008061056489898989898861065e565b91509150811561058957806040516375939b9360e11b81526004016104299190613e81565b505050505050505050565b60008060006105a4868989610dff565b905060006105b58260000151610a79565b6105c28660200151610a79565b6105cc9190613e94565b90506000856040015112156105ed5760408501516105ea9082613ec4565b90505b6000811215610603576000935091506103dc9050565b60006106158b8b88606001518a610e99565b905060006106278c8c60000151610edd565b905081811115610635578091505b6000610648610164896000015185610f56565b8412159d939c50929a5050505050505050505050565b6000606061066a613646565b6106958987878a61068a6106808d604001515190565b8b51906000610f6f565b60208d0151516100e5565b5081526106ae6106a788516040015190565b8787610dff565b60408201819052516106c588602001516040015190565b6106cf9190613df2565b60608201526106e361016488602001515190565b6106ec90613eec565b81608001818152505061073760405180608001604052808b6001600160a01b031681526020018881526020018360800151815260200161072e8a604001515190565b15159052610fa8565b60a0820181905260001361075157600060a082015261079f565b60006107618a8860000151611050565b9050600061077d6101646107778b602001515190565b84610f56565b61078690613eec565b9050808360a00151121561079c5760a083018190525b50505b60006040518061010001604052808b6001600160a01b031681526020018a6001600160a01b031681526020018981526020018360400151815260200188604001516001600160a01b0316815260200188606001516001600160a01b0316815260200161080d8a602001515190565b815260200160006001600160a01b03168152509050600061082d8261106a565b90506000836040015160000151826101a0015161084a9190613df2565b905061085581610a79565b60a08501518551606087015161086a90610a79565b6108749190613ec4565b61087e9190613ec4565b6108889190613e09565b610100850152861561099a576109518c6001600160a01b031663bd02d0f56040516020016108dc9060208082526012908201527113525397d0d3d31310551154905317d554d160721b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161091091815260200190565b602060405180830381865afa15801561092d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101649190613e68565b60c08501819052610100850151121561099a5760016040518060400160405280600e81526020016d1b5a5b8818dbdb1b185d195c985b60921b81525095509550505050506103dc565b6000846101000151136109d25760016040518060400160405280600381526020016203c20360ec1b81525095509550505050506103dc565b6109e08c8a60000151610edd565b6020850152610a016101646109f78c602001515190565b8660200151610f56565b60e085018190526101008501511215610a575760016040518060400160405280601b81526020017a6d696e20636f6c6c61746572616c20666f72206c6576657261676560281b81525095509550505050506103dc565b5050604080516020810190915260008082529b909a5098505050505050505050565b60006001600160ff1b03821115610ae35760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610429565b5090565b600080610afc84604001518560600151611254565b905080856001600160a01b031663bd02d0f5610b1c876000015187611283565b6040518263ffffffff1660e01b8152600401610b3a91815260200190565b602060405180830381865afa158015610b57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7b9190613e68565b610b859190613e46565b9150505b9392505050565b600080610ba161016488888761130b565b90506000610bb088888761135e565b9050811580610bbd575080155b15610bcd57600092505050610c15565b6000610bda878787610f6f565b90506000610beb6101648385613df2565b9050600087610c0357610bfe8286613e09565b610c0d565b610c0d8583613e09565b955050505050505b95945050505050565b600080841215610c2f575082610c64565b6000610c3d888489896113a5565b90506000610c4e6101648684610f56565b9050808613610c5d5785610c5f565b805b925050505b9695505050505050565b600080821215610ae35760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610429565b600080610cd685610cd086611420565b85611431565b905060008413610cf757610ce981610a79565b610cf290613eec565b610b85565b610b8581610a79565b6000816001610d0f8286613f08565b610d199190613f1b565b610d239190613e46565b90505b92915050565b6000610d39838584610cc0565b949350505050565b60405163a8d8fff560e01b815260009073__$ff439aa65a80c9eec648f15db20b189505$__9063a8d8fff590610d7d9086908690600401613f2e565b608060405180830381865af4158015610d9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbe9190613f48565b9050610dca838261143e565b505050565b610dd98282611507565b610dfb5781516040516341ce349f60e11b815261042991908390600401613f2e565b5050565b610e07613698565b82604001516001600160a01b0316846001600160a01b031603610e2f57506020810151610b89565b82606001516001600160a01b0316846001600160a01b031603610e5757506040810151610b89565b82602001516001600160a01b0316846001600160a01b031603610e7c57508051610b89565b8251604051635f2394d160e11b8152610429918691600401613f2e565b600080610ea786868561130b565b9050610eb38185611540565b90506000610ec687876000015186611577565b9050610ed28282610f56565b979650505050505050565b6000826001600160a01b031663bd02d0f5610ef7846115f1565b6040518263ffffffff1660e01b8152600401610f1591815260200190565b602060405180830381865afa158015610f32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d239190613e68565b6000610d23838368327cb2734119d3b7a9601e1b611431565b60008215610f905781610f83578351610f89565b83602001515b9050610b89565b81610f9f578360200151610d39565b50509051919050565b600080610fb483611677565b90506000610fcf8460000151856020015160000151846116ba565b905060008112610fe0579392505050565b600080610ff986600001518760200151602001516117cb565b915091508161100c575090949350505050565b600061101887836118e1565b905060006110338860000151896020015160000151846116ba565b90508481126110425784611044565b805b98975050505050505050565b6000826001600160a01b031663bd02d0f5610ef784611960565b6110726136b2565b60006110a78360000151846020015185606001516110938760400151515190565b604088015151602001518860c001516119b7565b905060006110bd84600001518560400151611c1c565b90506110d28460000151856060015183611ca9565b6040830181905260608101516020909101516101408401516110f49190613f08565b6110fe9190613f1b565b6101208301526040820151606001516101008301805161111f908390613f08565b9052508351604080860151805160208101519083015191909201515161114793929190611db8565b6020830151606001528351604085015161117b919061116890516020015190565b6080870151604080890151015151611dd4565b602083015160800152835160408501516111af919061119c90516020015190565b60a0870151604080890151015151611dd4565b60208301805160a001919091525160408501516111cc9190611df0565b60208301528351606085015160c086015160e08701516111ee93929190611e6c565b60608301819052825160c00151604091820151918401516020015161016085015191929161121c9190613f08565b6112269190613f08565b6112309190613f1b565b610180830181905260208301515161124791613f08565b6101a08301525092915050565b6000816001600160a01b0316836001600160a01b031614611276576001611279565b60025b60ff169392505050565b60006040516020016112b4906020808252600b908201526a1413d3d317d05353d5539560aa1b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b0380861691830191909152831660608201526080015b60405160208183030381529060405280519060200120905092915050565b60008061132084604001518560600151611254565b9050600061133986866000015187604001518786611ed4565b9050600061135287876000015188606001518887611ed4565b9050610ed28183613f08565b60008061137384604001518560600151611254565b9050600061138c86866000015187604001518786611f5a565b9050600061135287876000015188606001518887611f5a565b6000846001600160a01b031663bd02d0f56113c1868686611f77565b6040518263ffffffff1660e01b81526004016113df91815260200190565b602060405180830381865afa1580156113fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c159190613e68565b600080821215610ae3575060000390565b6000610d39848484612006565b80516001600160a01b0316611466576040516302fde0d760e11b815260040160405180910390fd5b6000826001600160a01b0316637ae1cfca61148484600001516120b5565b6040518263ffffffff1660e01b81526004016114a291815260200190565b602060405180830381865afa1580156114bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e39190613faf565b90508015610dca5781516040516309f8c93760e01b81526104299190600401613fcc565b600082604001516001600160a01b0316826001600160a01b03161480610d235750506060909101516001600160a01b0391821691161490565b6000808213156115645761155382611420565b61155d9084613f08565b9050610d26565b61156d82611420565b610d239084613f1b565b6000836001600160a01b031663bd02d0f561159285856120ed565b6040518263ffffffff1660e01b81526004016115b091815260200190565b602060405180830381865afa1580156115cd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d399190613e68565b600060405160200161162c9060208082526015908201527426a4a72fa1a7a62620aa22a920a62fa320a1aa27a960591b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b038416908201526060015b604051602081830303815290604052805190602001209050919050565b61167f61377b565b600061169583600001518460200151600161130b565b905060006116ad84600001518560200151600061130b565b9050610d39848383612185565b6000806116cf83600001518460200151612277565b905060006116e584604001518560600151612277565b6060850151604086015160208701518751939450909211159111151460006001600160a01b03881663bd02d0f561171b89612299565b6040518263ffffffff1660e01b815260040161173991815260200190565b602060405180830381865afa158015611756573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177a9190613e68565b905081156117ad5783831060006117928a8a846122dc565b90506117a086868386612303565b9650505050505050610b89565b6000806117ba8a8a612335565b915091506117a08686848487612449565b6000806000846001600160a01b031663a6ed563e6117e886612492565b6040518263ffffffff1660e01b815260040161180691815260200190565b602060405180830381865afa158015611823573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118479190613e68565b90508061185b5760008092509250506118da565b6001856001600160a01b031663dc97d962611875846124c8565b6040518263ffffffff1660e01b815260040161189391815260200190565b602060405180830381865afa1580156118b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d49190613e68565b92509250505b9250929050565b6118e961377b565b6000806000841315611905576118fe84610c6e565b9050611919565b61191661191185613eec565b610c6e565b91505b600085604001511215611955576000611939866040015161191190613eec565b90506119458184613f08565b92506119518183613f08565b9150505b610c15858383612185565b600060405160200161162c906020808252602b908201527f4d41585f504f534954494f4e5f494d504143545f464143544f525f464f525f4c60408201526a49515549444154494f4e5360a81b606082015260800190565b6119bf6136b2565b6119c76136b2565b6080810186905280516001600160a01b0386166040909101526119ea8786612533565b8451608081019190915260608101919091526001600160a01b03918216602082015291909152881663bd02d0f5611a20866127a5565b6040518263ffffffff1660e01b8152600401611a3e91815260200190565b602060405180830381865afa158015611a5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7f9190613e68565b60a08201819052865190611a94908590610f56565b611a9e9190613e46565b6101608201819052815160600151611ab69190610f56565b815160a090810191909152815190810151608090910151611ad79190610f56565b815160c09081019190915281519081015160a090910151611af89190613f1b565b815160e00152805160a00151610160820151611b149190613f1b565b60c08201526040516001600160a01b0389169063bd02d0f590611b6a906020016020808252601c908201527b2827a9a4aa24a7a72fa322a2afa922a1a2a4ab22a92fa320a1aa27a960211b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611b9e91815260200190565b602060405180830381865afa158015611bbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bdf9190613e68565b60e0820181905260c0820151611bf491610f56565b610100820181905260c0820151611c0b9190613f1b565b610140820152979650505050505050565b600080611c3a84611c2f85516020015190565b6040860151516127de565b905080611c4c84602001516060015190565b1115611c775760208301516060015181604051634cd96ac160e11b8152600401610429929190613b97565b6000611c8884602001516060015190565b611c929083613f1b565b9050610c15611ca385602001515190565b82610f56565b611cb161377b565b611cb961377b565b8281528351611cc89084613e46565b816020018181525050846001600160a01b031663bd02d0f5604051602001611d21906020808252601d908201527f424f52524f57494e475f4645455f52454345495645525f464143544f52000000604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611d5591815260200190565b602060405180830381865afa158015611d72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d969190613e68565b604082018190526020820151611dab91610f56565b6060820152949350505050565b6000846001600160a01b031663bd02d0f56113c18686866127f9565b6000846001600160a01b031663bd02d0f56113c186868661287f565b611df86137a3565b611e1c8360600151611e0f84602001516080015190565b60208501515160016128cc565b83526080830151611e4390611e36846020015160a0015190565b60208501515160006128cc565b602084015260a0830151611e6090611e36846020015160c0015190565b60408401525090919050565b611e746137d9565b611e7c6137d9565b6001600160a01b038316611e91579050610d39565b6001600160a01b0383168152611ea78684612903565b60208201819052855190611ebc908690610f56565b611ec69190613e46565b604082015295945050505050565b600081866001600160a01b031663bd02d0f5611ef1888888612a49565b6040518263ffffffff1660e01b8152600401611f0f91815260200190565b602060405180830381865afa158015611f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f509190613e68565b610c649190613e46565b600081866001600160a01b031663bd02d0f5611ef1888888612a7c565b6000604051602001611fab906020808252600e908201526d26a0ac2fa827262fa320a1aa27a960911b604082015260600190565b60408051601f1981840301815282825280516020918201209083015281018590526001600160a01b0384166060820152821515608082015260a0015b6040516020818303038152906040528051906020012090509392505050565b60008080600019858709858702925082811083820303915050806000036120405783828161203657612036613e30565b0492505050610b89565b80841161204c57600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600060405160200161162c906020808252601290820152711254d7d3505492d15517d11254d05093115160721b604082015260600190565b600060405160200161214b9060208082526032908201527f4d494e5f434f4c4c41544552414c5f464143544f525f464f525f4f50454e5f49604082015271272a22a922a9aa2fa6aaa62a24a82624a2a960711b606082015260800190565b60408051601f198184030181528282528051602091820120908301526001600160a01b0385169082015282151560608201526080016112ed565b61218d61377b565b606084015183908390156121f957600086604001511280156121be5750846121bc876040015161191190613eec565b115b156121e45785604001518560405163756d7c9d60e11b8152600401610429929190613b97565b6121f2858760400151611540565b9150612253565b6000866040015112801561221c57508361221a876040015161191190613eec565b115b156122425785604001518460405163022bc34560e61b8152600401610429929190613b97565b612250848760400151611540565b90505b60408051608081018252958652602086019490945292840152506060820152919050565b600081831161228f5761228a8383613f1b565b610d23565b610d238284613f1b565b600060405160200161162c906020808252601f908201527f504f534954494f4e5f494d504143545f4558504f4e454e545f464143544f5200604082015260600190565b60008060006122eb8686612335565b91509150836122fa5780610c64565b50949350505050565b600084841081612327612317888787612ab9565b612322888888612ab9565b612277565b905060006110448284612ad2565b6000806000846001600160a01b031663bd02d0f5612354866001612af5565b6040518263ffffffff1660e01b815260040161237291815260200190565b602060405180830381865afa15801561238f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b39190613e68565b90506000856001600160a01b031663bd02d0f56123d1876000612af5565b6040518263ffffffff1660e01b81526004016123ef91815260200190565b602060405180830381865afa15801561240c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124309190613e68565b90508082111561243e578091505b909590945092505050565b600080612457878685612ab9565b90506000612466878686612ab9565b905060006124748383612277565b9050600061248482848611612ad2565b9a9950505050505050505050565b600060405160200161162c9060208082526010908201526f1592549515505317d513d2d15397d25160821b604082015260600190565b600060405160200161250b906020808252601f908201527f5649525455414c5f494e56454e544f52595f464f525f504f534954494f4e5300604082015260600190565b604051602081830303815290604052805190602001208260405160200161165a929190613b97565b6000806000806000866001600160a01b03166385725b58876040518263ffffffff1660e01b81526004016125679190613fcc565b602060405180830381865afa158015612584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a89190613e68565b905060008080831561277d576040516306459e2360e51b8152600481018590526001600160a01b038b169063c8b3c46090602401602060405180830381865afa1580156125f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061261d9190613fe0565b925060008a6001600160a01b0316631582a018856040518263ffffffff1660e01b815260040161264d9190613fcc565b602060405180830381865afa15801561266a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268e9190613e68565b60405163039af9eb60e01b8152600481018290529091506001600160a01b038c169063039af9eb906024016040805180830381865afa1580156126d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f99190613ffd565b60405163071a6a7960e41b815291945092506000906001600160a01b038d16906371a6a7909061272d908890600401613fcc565b602060405180830381865afa15801561274a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276e9190613e68565b9050801561277a578092505b50505b838361278884612b31565b61279184612b31565b929d919c509a509098509650505050505050565b600060405160200161162c906020808252601390820152722827a9a4aa24a7a72fa322a2afa320a1aa27a960691b604082015260600190565b6000836001600160a01b031663bd02d0f56115928585612b56565b600060405160200161283a906020808252601b908201527a46554e44494e475f4645455f414d4f554e545f5045525f53495a4560281b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b038087169183019190915284166060820152821515608082015260a001611fe7565b600060405160200161283a9060208082526021908201527f434c41494d41424c455f46554e44494e475f414d4f554e545f5045525f53495a6040820152604560f81b606082015260800190565b6000806128d98587613f1b565b9050610c6484826128fd66038d7ea4c6800068327cb2734119d3b7a9601e1b613df2565b86612b97565b600080836001600160a01b031663bd02d0f560405160200161294a9060208082526011908201527026a0ac2faaa4afa322a2afa320a1aa27a960791b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161297e91815260200190565b602060405180830381865afa15801561299b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129bf9190613e68565b90506000846001600160a01b031663bd02d0f56129db86612bbe565b6040518263ffffffff1660e01b81526004016129f991815260200190565b602060405180830381865afa158015612a16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a3a9190613e68565b9050818110610d395781610c15565b600060405160200161283a906020808252600d908201526c13d4115397d2539511549154d5609a1b604082015260600190565b600060405160200161283a906020808252601790820152764f50454e5f494e5445524553545f494e5f544f4b454e5360481b604082015260600190565b600080612ac68584612bf1565b9050610b858185610f56565b60008115612ae35761155d83610a79565b612aec83610a79565b61155d90613eec565b600060405160200161214b906020808252601690820152752827a9a4aa24a7a72fa4a6a820a1aa2fa320a1aa27a960511b604082015260600190565b6000612710612b4c68327cb2734119d3b7a9601e1b84613df2565b610d269190613e46565b600060405160200161214b906020808252601b908201527a21aaa6aaa620aa24ab22afa127a92927aba4a723afa320a1aa27a960291b604082015260600190565b60008115612bb357612bac8585856001612c50565b9050610d39565b610c15858585612006565b600060405160200161162c906020808252600d908201526c2aa4afa322a2afa320a1aa27a960991b604082015260600190565b600068327cb2734119d3b7a9601e1b831015612c0f57506000610d26565b68327cb2734119d3b7a9601e1b8203612c29575081610d26565b6000612c45612c3785612ca1565b612c4085612ca1565b612cb2565b9050610d3981612cf2565b600080612c5e868686612006565b90506001836002811115612c7457612c74614021565b148015612c91575060008480612c8c57612c8c613e30565b868809115b15610c1557610c64600182613f08565b6000610d2664e8d4a5100083613e46565b600082600003612cd8578115612cc957600061155d565b50670de0b6b3a7640000610d26565b610d23612ced612ce785612d03565b84612db9565b612dc5565b6000610d2664e8d4a5100083613df2565b6000670de0b6b3a7640000821015612d3157604051633621413760e21b815260048101839052602401610429565b6000612d46670de0b6b3a76400008404612e0b565b670de0b6b3a764000081029250905082811c670de0b6b3a763ffff198101612d6f575050919050565b6706f05b59d3b200005b8015612db157670de0b6b3a7640000828002049150671bc16d674ec800008210612da9579283019260019190911c905b60011c612d79565b505050919050565b6000610d238383612eee565b6000680a688906bd8b0000008210612df357604051634a4f26f160e01b815260048101839052602401610429565b670de0b6b3a7640000604083901b04610b8981612fb4565b6000600160801b8210612e2b57608091821c91612e289082613f08565b90505b600160401b8210612e4957604091821c91612e469082613f08565b90505b600160201b8210612e6757602091821c91612e649082613f08565b90505b620100008210612e8457601091821c91612e819082613f08565b90505b6101008210612ea057600891821c91612e9d9082613f08565b90505b60108210612ebb57600491821c91612eb89082613f08565b90505b60048210612ed657600291821c91612ed39082613f08565b90505b60028210612ee957610d26600182613f08565b919050565b60008080600019848609848602925082811083820303915050670de0b6b3a76400008110612f325760405163698d9a0160e11b815260048101829052602401610429565b600080670de0b6b3a764000086880991506706f05b59d3b1ffff8211905082600003612f705780670de0b6b3a7640000850401945050505050610d26565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600160bf1b6001603f1b821615612fd45768016a09e667f3bcc9090260401c5b6001603e1b821615612fef576801306fe0a31b7152df0260401c5b6001603d1b82161561300a576801172b83c7d517adce0260401c5b6001603c1b8216156130255768010b5586cf9890f62a0260401c5b6001603b1b821615613040576801059b0d31585743ae0260401c5b6001603a1b82161561305b57680102c9a3e778060ee70260401c5b600160391b8216156130765768010163da9fb33356d80260401c5b600160381b82161561309157680100b1afa5abcbed610260401c5b600160371b8216156130ac5768010058c86da1c09ea20260401c5b600160361b8216156130c7576801002c605e2e8cec500260401c5b600160351b8216156130e257680100162f3904051fa10260401c5b600160341b8216156130fd576801000b175effdc76ba0260401c5b600160331b82161561311857680100058ba01fb9f96d0260401c5b600160321b8216156131335768010002c5cc37da94920260401c5b600160311b82161561314e576801000162e525ee05470260401c5b600160301b8216156131695768010000b17255775c040260401c5b6001602f1b821615613184576801000058b91b5bc9ae0260401c5b6001602e1b82161561319f57680100002c5c89d5ec6d0260401c5b6001602d1b8216156131ba5768010000162e43f4f8310260401c5b6001602c1b8216156131d557680100000b1721bcfc9a0260401c5b6001602b1b8216156131f05768010000058b90cf1e6e0260401c5b6001602a1b82161561320b576801000002c5c863b73f0260401c5b600160291b82161561322657680100000162e430e5a20260401c5b600160281b821615613241576801000000b1721835510260401c5b600160271b82161561325c57680100000058b90c0b490260401c5b600160261b8216156132775768010000002c5c8601cc0260401c5b600160251b821615613292576801000000162e42fff00260401c5b600160241b8216156132ad5768010000000b17217fbb0260401c5b600160231b8216156132c8576801000000058b90bfce0260401c5b600160221b8216156132e357680100000002c5c85fe30260401c5b600160211b8216156132fe5768010000000162e42ff10260401c5b600160201b82161561331957680100000000b17217f80260401c5b63800000008216156133345768010000000058b90bfc0260401c5b634000000082161561334f576801000000002c5c85fe0260401c5b632000000082161561336a57680100000000162e42ff0260401c5b6310000000821615613385576801000000000b17217f0260401c5b63080000008216156133a057680100000000058b90c00260401c5b63040000008216156133bb5768010000000002c5c8600260401c5b63020000008216156133d6576801000000000162e4300260401c5b63010000008216156133f15768010000000000b172180260401c5b6280000082161561340b576801000000000058b90c0260401c5b6240000082161561342557680100000000002c5c860260401c5b6220000082161561343f5768010000000000162e430260401c5b6210000082161561345957680100000000000b17210260401c5b620800008216156134735768010000000000058b910260401c5b6204000082161561348d576801000000000002c5c80260401c5b620200008216156134a757680100000000000162e40260401c5b620100008216156134c05761b172600160401b010260401c5b6180008216156134d8576158b9600160401b010260401c5b6140008216156134f057612c5d600160401b010260401c5b6120008216156135085761162e600160401b010260401c5b61100082161561352057610b17600160401b010260401c5b6108008216156135385761058c600160401b010260401c5b610400821615613550576102c6600160401b010260401c5b61020082161561356857610163600160401b010260401c5b61010082161561357f5760b1600160401b010260401c5b6080821615613595576059600160401b010260401c5b60408216156135ab57602c600160401b010260401c5b60208216156135c1576016600160401b010260401c5b60108216156135d757600b600160401b010260401c5b60088216156135ed576006600160401b010260401c5b6004821615613603576003600160401b010260401c5b6002821615613619576001600160401b010260401c5b600182161561362f576001600160401b010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b6040518061012001604052806000815260200160008152602001613668613698565b81526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b604080516102c0810190915260006101c082018181526101e08301829052610200830182905261022083018290526102408301829052610260830182905261028083018290526102a083019190915281526020810161370f6137a3565b815260200161371c61377b565b81526020016137296137d9565b8152602001613736613698565b81526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b6001600160a01b038116811461381857600080fd5b50565b604051608081016001600160401b038111828210171561384b57634e487b7160e01b600052604160045260246000fd5b60405290565b604051606081016001600160401b038111828210171561384b57634e487b7160e01b600052604160045260246000fd5b60405161012081016001600160401b038111828210171561384b57634e487b7160e01b600052604160045260246000fd5b6000608082840312156138c457600080fd5b6138cc61381b565b905081356138d981613803565b815260208201356138e981613803565b602082015260408201356138fc81613803565b6040820152606082013561390f81613803565b606082015292915050565b60006040828403121561392c57600080fd5b604080519081016001600160401b038111828210171561395c57634e487b7160e01b600052604160045260246000fd5b604052823581526020928301359281019290925250919050565b600060c0828403121561398857600080fd5b613990613851565b905061399c838361391a565b81526139ab836040840161391a565b60208201526139bd836080840161391a565b604082015292915050565b801515811461381857600080fd5b6000602082840312156139e857600080fd5b604051602081016001600160401b0381118282101715613a1857634e487b7160e01b600052604160045260246000fd5b6040529050808235613a29816139c8565b905292915050565b60008183036101a0811215613a4557600080fd5b613a4d613851565b91506060811215613a5d57600080fd5b613a65613851565b8335613a7081613803565b81526020840135613a8081613803565b60208201526040840135613a9381613803565b60408201528252610120605f198201811315613aae57600080fd5b613ab6613881565b9150606084013582526080840135602083015260a0840135604083015260c0840135606083015260e084013560808301526101008085013560a08401528185013560c084015261014085013560e0840152610160850135818401525050806020830152506139bd8361018084016139d6565b6000806000806000806103408789031215613b4257600080fd5b8635613b4d81613803565b9550613b5c88602089016138b2565b9450613b6b8860a08901613976565b9350613b7b886101608901613a31565b9250610300870135915061032087013590509295509295509295565b918252602082015260400190565b6000806000806000806000610360888a031215613bc157600080fd5b8735613bcc81613803565b96506020880135613bdc81613803565b9550613beb8960408a01613a31565b9450613bfb896101e08a016138b2565b9350613c0b896102608a01613976565b9250610320880135613c1c816139c8565b9150610340880135613c2d816139c8565b8091505092959891949750929550565b600080600080600080868803610220811215613c5857600080fd5b8735613c6381613803565b9650613c728960208a016138b2565b9550613c818960a08a01613976565b9450610160880135613c9281613803565b9350610180880135613ca3816139c8565b9250608061019f1982011215613cb857600080fd5b50613cc161381b565b6101a088013581526101c088013560208201526101e088013560408201526102008801356060820152809150509295509295509295565b6000806000806000806103408789031215613d1257600080fd5b8635613d1d81613803565b95506020870135613d2d81613803565b9450613d3c8860408901613a31565b9350613d4c886101e089016138b2565b9250613d5c886102608901613976565b9150610320870135613d6d816139c8565b809150509295509295509295565b6000815180845260005b81811015613da157602081850181015186830182015201613d85565b506000602082860101526020601f19601f83011685010191505092915050565b8215158152604060208201526000610d396040830184613d7b565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610d2657610d26613ddc565b8181036000831280158383131683831282161715613e2957613e29613ddc565b5092915050565b634e487b7160e01b600052601260045260246000fd5b600082613e6357634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215613e7a57600080fd5b5051919050565b602081526000610d236020830184613d7b565b80820260008212600160ff1b84141615613eb057613eb0613ddc565b8181058314821517610d2657610d26613ddc565b8082018281126000831280158216821582161715613ee457613ee4613ddc565b505092915050565b6000600160ff1b8201613f0157613f01613ddc565b5060000390565b80820180821115610d2657610d26613ddc565b81810381811115610d2657610d26613ddc565b6001600160a01b0392831681529116602082015260400190565b600060808284031215613f5a57600080fd5b613f6261381b565b8251613f6d81613803565b81526020830151613f7d81613803565b60208201526040830151613f9081613803565b60408201526060830151613fa381613803565b60608201529392505050565b600060208284031215613fc157600080fd5b8151610b89816139c8565b6001600160a01b0391909116815260200190565b600060208284031215613ff257600080fd5b8151610b8981613803565b6000806040838503121561401057600080fd5b505080516020909101519092909150565b634e487b7160e01b600052602160045260246000fdfea264697066735822122037de7a53918e1f241b5ede768c5444e2831d5cba4e22641b45fb4d9bd59b193464736f6c63430008120033";

type PositionUtilsConstructorParams =
  | [linkLibraryAddresses: PositionUtilsLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PositionUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class PositionUtils__factory extends ContractFactory {
  constructor(...args: PositionUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        PositionUtils__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: PositionUtilsLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$ff439aa65a80c9eec648f15db20b189505\\$__", "g"),
      linkLibraryAddresses[
        "contracts/market/MarketStoreUtils.sol:MarketStoreUtils"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PositionUtils> {
    return super.deploy(overrides || {}) as Promise<PositionUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PositionUtils {
    return super.attach(address) as PositionUtils;
  }
  override connect(signer: Signer): PositionUtils__factory {
    return super.connect(signer) as PositionUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PositionUtilsInterface {
    return new utils.Interface(_abi) as PositionUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PositionUtils {
    return new Contract(address, _abi, signerOrProvider) as PositionUtils;
  }
}

export interface PositionUtilsLibraryAddresses {
  ["contracts/market/MarketStoreUtils.sol:MarketStoreUtils"]: string;
}
